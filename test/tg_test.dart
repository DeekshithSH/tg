import 'dart:typed_data';

//import 'package:tg/tg.dart' as tg;
import 'package:test/test.dart';

final n = [
  232,
  187,
  51,
  5,
  192,
  181,
  44,
  108,
  242,
  175,
  223,
  118,
  55,
  49,
  52,
  137,
  230,
  62,
  5,
  38,
  142,
  91,
  173,
  182,
  1,
  175,
  65,
  119,
  134,
  71,
  46,
  95,
  147,
  184,
  84,
  56,
  150,
  142,
  32,
  230,
  114,
  154,
  48,
  28,
  10,
  252,
  18,
  27,
  247,
  21,
  31,
  131,
  68,
  54,
  247,
  253,
  166,
  128,
  132,
  122,
  102,
  191,
  100,
  172,
  206,
  199,
  142,
  226,
  28,
  11,
  49,
  111,
  14,
  218,
  254,
  47,
  65,
  144,
  141,
  167,
  189,
  31,
  74,
  81,
  7,
  99,
  142,
  235,
  103,
  4,
  10,
  206,
  71,
  42,
  20,
  249,
  13,
  159,
  124,
  43,
  125,
  239,
  153,
  104,
  139,
  163,
  7,
  58,
  219,
  87,
  80,
  187,
  2,
  150,
  73,
  2,
  163,
  89,
  254,
  116,
  93,
  129,
  112,
  227,
  104,
  118,
  212,
  253,
  138,
  93,
  65,
  178,
  167,
  108,
  191,
  249,
  161,
  50,
  103,
  235,
  149,
  128,
  178,
  208,
  109,
  16,
  53,
  116,
  72,
  210,
  13,
  157,
  162,
  25,
  28,
  181,
  216,
  201,
  57,
  130,
  150,
  28,
  223,
  222,
  218,
  98,
  158,
  55,
  241,
  251,
  9,
  160,
  114,
  32,
  39,
  105,
  96,
  50,
  254,
  97,
  237,
  102,
  61,
  183,
  163,
  127,
  111,
  38,
  61,
  55,
  15,
  105,
  219,
  83,
  160,
  220,
  10,
  23,
  72,
  189,
  170,
  255,
  98,
  9,
  213,
  100,
  84,
  133,
  230,
  224,
  1,
  209,
  149,
  50,
  85,
  117,
  126,
  75,
  142,
  66,
  129,
  51,
  71,
  177,
  29,
  166,
  171,
  80,
  15,
  208,
  172,
  231,
  230,
  223,
  163,
  115,
  97,
  153,
  204,
  175,
  147,
  151,
  237,
  7,
  69,
  164,
  39,
  220,
  250,
  108,
  214,
  123,
  203,
  26,
  207,
  243
];

void main() {
  final value = _bigEndianInteger(Uint8List.fromList(n));

  test('calculate', () {
    expect(value.toString(),
        '29379598170669337022986177149456128565388431120058863768162556424047512191330847455146576344487764408661701890505066208632169112269581063774293102577308490531282748465986139880977280302242772832972539403531316010870401287642763009136156734339538042419388722777357134487746169093539093850251243897188928735903389451772730245253062963384108812842079887538976360465290946139638691491496062099570836476454855996319192747663615955633778034897140982517446405334423701359108810182097749467210509584293428076654573384828809574217079944388301239431309115013843331317877374435868468779972014486325557807783825502498215169806323');
  });
}

BigInt _bigEndianInteger(Uint8List value) {
  final data = _hex(value);
  return BigInt.parse(data, radix: 16);
}

String _hex(Iterable<int> v) {
  final h = v
      .map((vv) => vv.toRadixString(16).padLeft(2, '0'))
      .join('')
      .toUpperCase();

  return h;
}
